# Notes:

#The Validate DB migrations step runs your migrate.py to ensure the schema is up-to-date.
#Adjust SQLALCHEMY_DATABASE_URI as needed for your test DB.
#The deploy step uses SSH to connect to your EC2 and run the production compose file.
#Make sure your secrets (HOST, USERNAME, SSH_KEY) are set in your GitHub repo.
# use github secrets to store sensitive data like SSH keys, database passwords, etc.

name: The Leonardo's Discussion Room CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: forum
        ports:
          - 3306:3306

    steps:
      - uses: actions/checkout@v2

      # Cache Node.js modules
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      # Setup Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      # Lint frontend
      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      # Test frontend
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false

      # Build frontend
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # Setup Python for backend
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Install backend dependencies       put pytest and flake8 (dk whats this) in requirements.txt
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      # Lint backend          #this one the linting annoying do at the end
      # - name: Run backend linting
      #   run: |
      #     cd backend
      #     flake8 .

      # Test backend          # enable when got actual test
      # - name: Run backend tests
      #   run: |
      #     cd backend
      #     pytest

  #TODOIS
  deploy:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /path/to/your/project
            git pull
            docker-compose -f docker-compose-prod.yml down
            docker-compose -f docker-compose-prod.yml up -d

    # Test nginx # this is the lab version
    # - name: Checkout code
    #   uses: actions/checkout@v4

    # - name: Start Nginx with Docker
    #   run: |
    #     docker run -d --name test-nginx -p 8080:80 -v ${{ github.workspace }}/index.html:/usr/share/nginx/html/index.html:ro nginx:latest

    # - name: Wait for Nginx to start
    #   run: sleep 5

    # - name: Test Hello World Page
    #   run: |
    #     curl -s -o response.html http://localhost:8080/index.html
    #     grep "Hello World" response.html

    # - name: Stop Nginx container
    #   run: docker stop test-nginx
