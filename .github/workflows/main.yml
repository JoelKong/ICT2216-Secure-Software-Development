name: The Leonardo's Discussion Room CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

#TODO: SAST (sonarqube) and DAST (OWASP ZAP) scans
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          # Temporary test database to run integration tests in the future
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: leonardo
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python run_tests.py

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-app
          path: |
            backend/
            !backend/.pytest_cache/
            !backend/htmlcov/
            !backend/.coverage
            !backend/logs/
            !backend/__pycache__/
            frontend/
            !frontend/dist/
            !frontend/node_modules/
            docker-compose-prod.yml
            scripts/deploy_prod.sh
            nginx/

  deploy_staging:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: "Deploy to staging"
        run: echo "Deploying to staging environment"

  deploy_uat:
    needs: deploy_staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: "Deploy to UAT"
        run: echo "Deploying to UAT environment"

  deploy_prod:
    needs: deploy_uat
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: artifacts/frontend-build

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-app
          path: artifacts/backend-app

      - name: Upload artifacts to production server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "artifacts/backend-app/*,artifacts/frontend-build/*"
          target: "/home/${{ secrets.USERNAME }}/leonardo-app"
          strip_components: 2

      - name: Create .env files on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            PROJECT_DIR="/home/${{ secrets.USERNAME }}/leonardo-app"
            mkdir -p $PROJECT_DIR/backend
            mkdir -p $PROJECT_DIR/frontend
            mkdir -p $PROJECT_DIR/scripts
            mkdir -p $PROJECT_DIR/nginx
            cd $PROJECT_DIR

            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env.production
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env.production
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env.production
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env.production

            echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> backend/.env.production
            echo "JWT_ACCESS_TOKEN_EXPIRES_HOURS=${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_HOURS }}" >> backend/.env.production
            echo "JWT_REFRESH_TOKEN_EXPIRES_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_DAYS }}" >> backend/.env.production
            echo "SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }}" > backend/.env.production
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> backend/.env.production
            echo "FRONTEND_ROUTE=${{ secrets.FRONTEND_ROUTE }}" >> backend/.env.production
            echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> backend/.env.production
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> backend/.env.production

            echo "VITE_API_ENDPOINT=${{ secrets.VITE_API_ENDPOINT }}" > frontend/.env.production
            echo "VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" >> frontend/.env.production

      - name: Finalize deployment on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.USERNAME }}/leonardo-app
            chmod +x ./scripts/deploy_prod.sh
            ./scripts/deploy_prod.sh
