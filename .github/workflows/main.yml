name: The Leonardo's Discussion Room CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_DATABASE: leonardo
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Load DB Schema
        run: mysql -h 127.0.0.1 -u user --password=password leonardo < SCHEMA.sql

      # - name: Validate DB Migrations //TODO find out why this not working
      #   env:
      #     SQLALCHEMY_DATABASE_URI: mysql+pymysql://user:password@127.0.0.1:3306/leonardo
      #   run: |
      #     cd backend
      #     alembic upgrade head

      # - name: Run backend linting
      #   run: |
      #     cd backend
      #     flake8 .

      # - name: Run backend tests
      #   env:
      #     SQLALCHEMY_DATABASE_URI: mysql+pymysql://user:password@127.0.0.1:3306/leonardo
      #   run: |
      #     cd backend
      #     pytest

  deploy_staging:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: "Deploy to staging"
        run: echo "Deploying to staging environment after manual approval..."

  deploy_uat:
    needs: deploy_staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: "Deploy to UAT"
        run: echo "Deploying to UAT environment after manual approval..."

  deploy_prod:
    needs: deploy_uat
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /path/to/your/project
            git pull origin main

            # Export secrets as environment variables for the deployment script
            export VITE_API_ENDPOINT='${{ secrets.VITE_API_ENDPOINT }}'
            export SECRET_KEY='${{ secrets.SECRET_KEY }}'
            export JWT_SECRET_KEY='${{ secrets.JWT_SECRET_KEY }}'
            export SQLALCHEMY_DATABASE_URI='${{ secrets.SQLALCHEMY_DATABASE_URI }}'
            export FRONTEND_ROUTE='${{ secrets.FRONTEND_ROUTE }}'

            # Make the script executable and run it
            chmod +x ./scripts/deploy_prod.sh
            ./scripts/deploy_prod.sh
