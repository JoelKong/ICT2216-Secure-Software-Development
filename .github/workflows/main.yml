name: The Leonardo's Discussion Room CI/CD Pipeline

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  code-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"
      - name: Create sonar-project.properties file
        run: |
          echo "sonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}" > sonar-project.properties
          echo "sonar.organization=${{ secrets.SONAR_ORGANIZATION }}" >> sonar-project.properties
          echo "sonar.host.url=${{ secrets.SONAR_HOST_URL }}" >> sonar-project.properties
          echo "sonar.token=${{ secrets.SONAR_TOKEN }}" >> sonar-project.properties
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "The Leonardo's Discussion Room"
          path: "."
          format: "HTML"
          out: "dependency-check-report"

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: Dependency-Check-Report
          path: dependency-check-report

  build:
    runs-on: ubuntu-latest
    needs: [code-scan, dependency-check]
    services:
      mysql:
        image: mysql:8.0
        env:
          # To run e2e tests and integration tests in the future
          MYSQL_ROOT_PASSWORD: ${{ secrets.TEMP_MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.TEMP_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.TEMP_MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.TEMP_MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python run_tests.py

      - name: Build source code artifact
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: |
            backend/
            frontend/
            docker-compose-prod.yml
            scripts/
            nginx/
            !backend/.pytest_cache/
            !backend/htmlcov/
            !backend/.coverage
            !backend/logs/
            !backend/__pycache__/
            !frontend/dist/
            !frontend/node_modules/

  deploy_staging:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: test
        run: echo "STAGING"


  deploy_uat:
    needs: deploy_staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: test
        run: echo "UAT"

  deploy_prod:
    needs: deploy_uat
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Download source code artifact
        uses: actions/download-artifact@v4
        with:
          name: source-code
          path: leonardo-app

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Create frontend .env file for build for VITE variables
        run: |
          echo "VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}" > leonardo-app/frontend/.env.production
          echo "VITE_API_ENDPOINT=${{ secrets.VITE_API_ENDPOINT }}" >> leonardo-app/frontend/.env.production

      - name: Install frontend dependencies and build
        run: |
          cd leonardo-app/frontend
          npm ci
          npm run build

      - name: Clean EC2 target directory before upload
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Cleaning old app files, preserving certbot directory..."
            cd ~/leonardo-app
            sudo find . -mindepth 1 -maxdepth 1 ! -name 'certbot' -exec rm -rf {} +
            mkdir -p ~/leonardo-app

      - name: Upload source code artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "leonardo-app/**"
          target: "/home/${{ secrets.USERNAME }}/leonardo-app"
          strip_components: 1

      - name: Update frontend-dist artifact
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "leonardo-app/frontend/dist/**"
          target: "/home/${{ secrets.USERNAME }}/leonardo-app/frontend/dist"
          strip_components: 3

      - name: Create .env files and finalize deployment on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            PROJECT_DIR="/home/${{ secrets.USERNAME }}/leonardo-app"
            cd $PROJECT_DIR

            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env.production
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env.production
            echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env.production
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env.production
            echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" >> .env.production
            echo "CERTBOT_DOMAIN=${{ secrets.CERTBOT_DOMAIN }}" >> .env.production

            echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> backend/.env.production
            echo "JWT_ACCESS_TOKEN_EXPIRES_HOURS=${{ secrets.JWT_ACCESS_TOKEN_EXPIRES_HOURS }}" >> backend/.env.production
            echo "JWT_REFRESH_TOKEN_EXPIRES_DAYS=${{ secrets.JWT_REFRESH_TOKEN_EXPIRES_DAYS }}" >> backend/.env.production
            echo "SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }}" >> backend/.env.production
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> backend/.env.production
            echo "FRONTEND_ROUTE=${{ secrets.FRONTEND_ROUTE }}" >> backend/.env.production
            echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> backend/.env.production
            echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> backend/.env.production
            echo "OPENAI_SECRET_KEY=${{ secrets.OPENAI_SECRET_KEY }}" >> backend/.env.production
            echo "MAIN_SERVER=${{ secrets.MAIN_SERVER }}" >> backend/.env.production
            echo "MAIL_PORT=${{ secrets.MAIL_PORT }}" >> backend/.env.production
            echo "MAIL_USE_TLS=${{ secrets.MAIL_USE_TLS }}" >> backend/.env.production
            echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> backend/.env.production
            echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> backend/.env.production
            echo "MAIL_DEFAULT_SENDER=${{ secrets.MAIL_DEFAULT_SENDER }}" >> backend/.env.production
            echo "MAIL_SECRET_KEY=${{ secrets.MAIL_SECRET_KEY }}" >> backend/.env.production

            chmod +x ./scripts/deploy_prod.sh
            ./scripts/deploy_prod.sh
      
      - name: ZAP-Scan-Report-Public-${{ github.run_id }}
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'http://theleonardodrhere.onthewifi.com'
          cmd_options: '-a'
          artifact_name: zap-report-staging-public-${{ github.run_id }}

          