# this docker is for dev, use for testing ig before pushing to the cloud
# need set up network and volumes (all this is from gpt)

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build: ./backend
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=mysql+pymysql://user:password@db:3306/forum
    depends_on:
      - db
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: forum
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      # - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./index.html:/var/www/html/index.html
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt # encryption stuff?
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    networks:
      - app-network

#   nginx:                                      # THIS IS THE LAB ONE
#     image: nginx:latest
#     container_name: nginx-proxy
#     restart: unless-stopped
#     ports:
#       - "80:80"
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro
#       - ./index.html:/var/www/html/index.html
#     networks:
#       lab-webproxy:
#         ipv4_address: 10.11.0.6

# networks:
#   lab-webproxy:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 10.11.0.0/16
#           gateway: 10.11.0.1

# wtf is this

# certbot:
#   image: certbot/certbot
#   volumes:
#     - ./certbot/www:/var/www/certbot
#     - ./certbot/conf:/etc/letsencrypt
#   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
